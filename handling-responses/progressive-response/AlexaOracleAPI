/*
 Copyright 2016 Brian Donohue.
*/

'use strict';

// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
exports.handler = function (event, context) {
    try {
        console.log("event.session.application.applicationId=" + event.session.application.applicationId);

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */

        if (event.session.new) {
            onSessionStarted({requestId: event.request.requestId}, event.session);
        }

        if (event.request.type === "LaunchRequest") {
            onLaunch(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "IntentRequest") {
            onIntent(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "SessionEndedRequest") {
            onSessionEnded(event.request, event.session);
            context.succeed();
        }
    } catch (e) {
        context.fail("Exception: " + e);
    }
};

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log("onSessionStarted requestId=" + sessionStartedRequest.requestId
        + ", sessionId=" + session.sessionId);

    // add any session init logic here
}

/**
 * Called when the user invokes the skill without specifying what they want.
 * This response should give the user some information about how to use the skill.
 */
function onLaunch(launchRequest, session, callback) {
    console.log("onLaunch requestId=" + launchRequest.requestId
        + ", sessionId=" + session.sessionId);

    var cardTitle = "Kellogg Coupons"
    var speechOutput = "You can ask Kellogg their coupons. Try saying, Alexa, ask Kellogg What is the most common distribution method for coupons."
    callback(session.attributes,
        buildSpeechletResponse(cardTitle, speechOutput, "", true));
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {
    console.log("onIntent requestId=" + intentRequest.requestId
        + ", sessionId=" + session.sessionId);

    var intent = intentRequest.intent,
        intentName = intentRequest.intent.name;

    // dispatch custom intents to handlers here
    if (intentName == 'DistMethod') {
        handleChartRequestDistMethod(intent, session, callback);
        }
       else if (intentName == 'NumberOfRecords') {
        handleChartRequestNumberOfRecords(intent, session, callback);
        }
       
        
    else {
        throw "Invalid intent";
    }
}

/**
 * Called when the user ends the session.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log("onSessionEnded requestId=" + sessionEndedRequest.requestId
        + ", sessionId=" + session.sessionId);

    // Add any cleanup logic here
}
const https = require('https');

function handleChartRequestDistMethod(intent, session, callbackDistMethod) {

         callAPEXDistMethod(function (result, error) {

            if (error) {
                console.log('error')
            } else {
                console.log("Final result is"+JSON.stringify(result))
                callbackDistMethod(null,buildSpeechletResponseWithoutCard(result.speech,"sample re-prompt",true))
            }
        });
}





var callAPEXDistMethod = function (callbackDistMethod) {

    var url = "https://apex.oracle.com/pls/apex/kelloggwmu/kellogg.cnhl4iqabzv5.us-east-1.rds.amazonaws.comDistMethod/";

    var req = https.get(url, (res) => {
        var body = "";

        res.on("data", (chunk) => {
            body += chunk;
        });

        res.on("end",  () => {
            var result = JSON.parse(body);

            callbackDistMethod({"speech":result.items[0].message + ". Would you like to know what was the most common distribution method in 2016?" });

            //callback('test');
        });
    }).on("error", (error) => {
        //callback(err);
        console.log('error');
    });
};



function handleChartRequestNumberOfRecords(intent, session, callbackNumberOfRecords) {

         callAPEXNumberOfRecords(function (result, error) {

            if (error) {
                console.log('error')
            } else {
                console.log("Final result is"+JSON.stringify(result))
                callbackNumberOfRecords(null,buildSpeechletResponseWithoutCard(result.speech,"sample re-prompt",true))
            }
        });
}



var callAPEXNumberOfRecords = function (callbackNumberOfRecords) {

    var url = "https://apex.oracle.com/pls/apex/kelloggwmu/kellogg.cnhl4iqabzv5.us-east-1.rds.amazonaws.comrecords/";

    var req = https.get(url, (res) => {
        var body = "";

        res.on("data", (chunk) => {
            body += chunk;
        });

        res.on("end",  () => {
            var result = JSON.parse(body);

            callbackNumberOfRecords({"speech":result.items[0].message });
            //callback('test');
        });
    }).on("error", (error) => {
        //callback(err);
        console.log('error');
    });
};



function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        card: {
            type: "Simple",
            title: title,
            content: output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildSpeechletResponseWithoutCard(output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    };
}
